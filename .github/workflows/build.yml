name: Build Wheels

on:
  workflow_dispatch:
    inputs:
      publish_to:
        description: 'Publish to PyPI environment'
        required: true
        type: choice
        options:
          - 'none'
          - 'test-pypi'
          - 'pypi'
        default: 'none'
      mac_only:
        description: 'Build only macOS wheels'
        required: true
        type: boolean
        default: false

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{ fromJSON(inputs.mac_only && '["macos-latest"]' || '["ubuntu-latest", "macos-latest"]') }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: Set up Python
        if: matrix.os == 'macos-latest'
        uses: actions/setup-python@v5
        with:
          python-version: '3.14'

      - name: Install setuptools_scm
        if: matrix.os == 'macos-latest'
        run: pip install setuptools_scm

      - name: Debug version before build
        if: matrix.os == 'macos-latest'
        run: |
          echo "Git Status:"
          git status
          echo -e "\nGit Tags:"
          git tag -l
          echo -e "\nCurrent Commit:"
          git rev-parse HEAD
          echo -e "\nSetuptools SCM Version before build:"
          python3 -m setuptools_scm

      # Download the ANTLR jar file into the parser directory
      - name: Download ANTLR jar
        run: |
          mkdir -p parser
          curl -L -o parser/antlr-4.13.1-complete.jar https://www.antlr.org/download/antlr-4.13.1-complete.jar

      # Build wheels using cibuildwheel
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        with:
          output-dir: dist
        env:
          CIBW_ARCHS_MACOS: "arm64"
          CIBW_BUILD_VERBOSITY: 1

          # Install Java and build on Linux
          CIBW_BEFORE_BUILD_LINUX: |
            set -e

            # Install uv
            curl -LsSf https://astral.sh/uv/install.sh | sh
            export PATH="$HOME/.cargo/bin:$PATH"

            # Install Java
            JAVA_VERSION=17
            JAVA_DIR="$PWD/java"
            mkdir -p "$JAVA_DIR"

            # Download the Java tarball
            curl -L -o java.tar.gz "https://api.adoptium.net/v3/binary/latest/${JAVA_VERSION}/ga/linux/x64/jdk/hotspot/normal/adoptium"

            # Extract the tarball
            tar -C "$JAVA_DIR" --strip-components=1 -xzf java.tar.gz
            export JAVA_HOME="$JAVA_DIR"
            export PATH="$JAVA_HOME/bin:$PATH"

            # Verify Java installation
            java -version

            # Install Go dependencies
            make setup-deps

            # Add protoc to PATH
            export PATH="$PWD/protoc/bin:$PATH"
            # Add go to PATH
            export PATH="$PWD/go/bin:$PATH"
            # Add GOPATH/bin to PATH
            export PATH="$(go env GOPATH)/bin:$PATH"

            # Generate protocol buffers
            make proto

            # Run go generate
            go generate ./...

            # Determine architecture
            if [[ "$(uname -m)" == "arm64" ]] || [[ "$(uname -m)" == "aarch64" ]]; then
              export GOARCH=arm64
            else
              export GOARCH=amd64
            fi

            # Build the Go shared library
            go build -buildmode=c-shared \
              -o python/reftrace/bindings/libreftrace.so \
              ./pkg/capi

          # Build on macOS (Java already available)
          CIBW_BEFORE_BUILD_MACOS: |
            set -e

            # Install uv
            curl -LsSf https://astral.sh/uv/install.sh | sh
            export PATH="$HOME/.cargo/bin:$PATH"

            make setup-deps

            # Add protoc to PATH
            export PATH="$PWD/protoc/bin:$PATH"
            # Add go to PATH
            export PATH="$PWD/go/bin:$PATH"
            # Add GOPATH/bin to PATH
            export PATH="$(go env GOPATH)/bin:$PATH"

            uv pip install setuptools_scm
            echo -e "\nSetuptools SCM Version BEFORE proto:"
            python3 -m setuptools_scm

            # Generate protocol buffers
            make proto

            echo -e "\nGit Status AFTER proto generation:"
            git status
            echo -e "\nSetuptools SCM Version AFTER proto:"
            python3 -m setuptools_scm

            # Run go generate
            go generate ./...

            echo -e "\nGit Status AFTER go generate:"
            git status
            echo -e "\nSetuptools SCM Version AFTER go generate:"
            python3 -m setuptools_scm

            # Build for arm mac
            go build -buildmode=c-shared \
              -o python/reftrace/bindings/libreftrace.dylib \
              ./pkg/capi

          # Environment variables for both Linux and macOS
          CIBW_ENVIRONMENT: |
            LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$PWD/python/reftrace/bindings"
            DYLD_LIBRARY_PATH="$DYLD_LIBRARY_PATH:$PWD/python/reftrace/bindings"

          CIBW_TEST_REQUIRES: pytest
          CIBW_TEST_COMMAND: pytest {project}/python/tests

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*.whl

      - name: Show generated version file
        if: matrix.os == 'macos-latest'
        run: |
          echo "Contents of _version.py:"
          cat python/reftrace/_version.py

  publish:
    name: Publish to PyPI
    if: inputs.publish_to != 'none'
    needs: [build_wheels]
    runs-on: ubuntu-latest
    environment: ${{ inputs.publish_to }}
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - name: Publish to Test PyPI
        if: inputs.publish_to == 'test-pypi'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
      - name: Publish to PyPI
        if: inputs.publish_to == 'pypi'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true
